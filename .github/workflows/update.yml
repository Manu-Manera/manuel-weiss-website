name: Update Pipeline

on:
  schedule:
    - cron: '0 3 * * 0' # Weekly on Sunday at 3 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to update'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      update_type:
        description: 'Type of update'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - dependencies
          - infrastructure
          - security
      force_update:
        description: 'Force update even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-central-1'

jobs:
  # Check for updates
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check.outputs.has_updates }}
      update_list: ${{ steps.check.outputs.update_list }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for dependency updates
        run: npm run update:check-dependencies

      - name: Check for infrastructure updates
        run: npm run update:check-infrastructure

      - name: Check for security updates
        run: npm run update:check-security

      - name: Generate update list
        id: check
        run: |
          if npm run update:has-updates; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "update_list=$(npm run update:list)" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "update_list=" >> $GITHUB_OUTPUT
          fi

  # Update dependencies
  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true' && (github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'dependencies')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update dependencies
        run: npm run update:dependencies

      - name: Run tests
        run: npm run test:unit

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: update dependencies" || exit 0

  # Update infrastructure
  update-infrastructure:
    name: Update Infrastructure
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true' && (github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'infrastructure')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update infrastructure
        run: npm run update:infrastructure -- --environment=${{ github.event.inputs.environment }}

      - name: Run infrastructure tests
        run: npm run test:infrastructure

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: update infrastructure" || exit 0

  # Update security
  update-security:
    name: Update Security
    runs-on: ubuntu-latest
    needs: check-updates
    if: needs.check-updates.outputs.has_updates == 'true' && (github.event.inputs.update_type == 'all' || github.event.inputs.update_type == 'security')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update security
        run: npm run update:security -- --environment=${{ github.event.inputs.environment }}

      - name: Run security tests
        run: npm run test:security

      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: update security" || exit 0

  # Deploy updates
  deploy-updates:
    name: Deploy Updates
    runs-on: ubuntu-latest
    needs: [check-updates, update-dependencies, update-infrastructure, update-security]
    if: always() && needs.check-updates.outputs.has_updates == 'true'
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy updates
        run: npm run deploy:updates -- --environment=${{ github.event.inputs.environment }}

      - name: Run post-update tests
        run: npm run test:post-update

  # Generate update report
  update-report:
    name: Generate Update Report
    runs-on: ubuntu-latest
    needs: [check-updates, update-dependencies, update-infrastructure, update-security, deploy-updates]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate update report
        run: npm run update:report -- --environment=${{ github.event.inputs.environment }}

      - name: Upload update report
        uses: actions/upload-artifact@v3
        with:
          name: update-report
          path: update-report/

      - name: Send update notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#updates'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
