name: Cleanup Pipeline

on:
  schedule:
    - cron: '0 2 * * 0' # Weekly on Sunday at 2 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to cleanup'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      cleanup_type:
        description: 'Type of cleanup'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - logs
          - artifacts
          - old_versions
      dry_run:
        description: 'Dry run (no actual cleanup)'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-central-1'

jobs:
  # Cleanup logs
  cleanup-logs:
    name: Cleanup Logs
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'logs'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup CloudWatch logs
        run: npm run cleanup:logs -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

      - name: Cleanup Lambda logs
        run: npm run cleanup:lambda-logs -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

  # Cleanup artifacts
  cleanup-artifacts:
    name: Cleanup Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'artifacts'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup S3 artifacts
        run: npm run cleanup:s3-artifacts -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

      - name: Cleanup ECR images
        run: npm run cleanup:ecr-images -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

  # Cleanup old versions
  cleanup-old-versions:
    name: Cleanup Old Versions
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all' || github.event.inputs.cleanup_type == 'old_versions'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup old Lambda versions
        run: npm run cleanup:lambda-versions -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

      - name: Cleanup old ECS tasks
        run: npm run cleanup:ecs-tasks -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

  # Cleanup resources
  cleanup-resources:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Cleanup unused security groups
        run: npm run cleanup:security-groups -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

      - name: Cleanup unused EBS volumes
        run: npm run cleanup:ebs-volumes -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

      - name: Cleanup unused Elastic IPs
        run: npm run cleanup:elastic-ips -- --environment=${{ github.event.inputs.environment }} --dry-run=${{ github.event.inputs.dry_run }}

  # Generate cleanup report
  cleanup-report:
    name: Generate Cleanup Report
    runs-on: ubuntu-latest
    needs: [cleanup-logs, cleanup-artifacts, cleanup-old-versions, cleanup-resources]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate cleanup report
        run: npm run cleanup:report -- --environment=${{ github.event.inputs.environment }}

      - name: Upload cleanup report
        uses: actions/upload-artifact@v3
        with:
          name: cleanup-report
          path: cleanup-report/

      - name: Send cleanup notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#cleanup'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
