name: CI/CD Pipeline

on:
  push:
    branches: [ main, staging, dev ]
  pull_request:
    branches: [ main, staging ]

jobs:
  # Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: ESLint
      run: npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-report.json
      continue-on-error: true
      
    - name: Prettier Check
      run: npx prettier --check .
      continue-on-error: true
      
    - name: Security Audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Upload ESLint Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: eslint-report
        path: eslint-report.json

  # Accessibility Testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Run Accessibility Tests
      run: npx playwright test --project=accessibility
      continue-on-error: true
      
    - name: Upload Accessibility Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-report
        path: playwright-report/

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli
      
    - name: Build Application
      run: npm run build
      
    - name: Start Application
      run: npm start &
      env:
        PORT: 3000
        
    - name: Wait for Application
      run: npx wait-on http://localhost:3000
      
    - name: Run Lighthouse CI
      run: |
        lhci autorun --collect.url=http://localhost:3000 \
          --collect.url=http://localhost:3000/bewerbungsmanager \
          --collect.url=http://localhost:3000/analytics-dashboard \
          --collect.url=http://localhost:3000/admin
      continue-on-error: true
      
    - name: Upload Lighthouse Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-report
        path: .lighthouseci/

  # API Documentation
  api-docs:
    name: API Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Validate OpenAPI
      run: |
        npx swagger-cli validate docs/api/openapi.yaml
        npx redoc-cli lint docs/api/openapi.yaml
        
    - name: Build API Documentation
      run: |
        chmod +x docs/api/build.sh
        ./docs/api/build.sh
        
    - name: Upload API Docs
      uses: actions/upload-artifact@v4
      with:
        name: api-docs
        path: docs/api/dist/

  # Deployment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, accessibility, performance]
    if: github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Deploy to Netlify Staging
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: '.'
        production-deploy: false
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_STAGING }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, accessibility, performance, api-docs]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Build API Documentation
      run: |
        chmod +x docs/api/build.sh
        ./docs/api/build.sh
        
    - name: Deploy to Netlify Production
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: '.'
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PRODUCTION }}
        
    - name: Notify Deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # End-to-End Testing
  e2e:
    name: End-to-End Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Install Playwright
      run: npx playwright install --with-deps
      
    - name: Run E2E Tests
      run: npx playwright test
      env:
        CI: true
        
    - name: Upload E2E Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-report
        path: playwright-report/

  # Bundle Analysis
  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Build Application
      run: npm run build
      
    - name: Analyze Bundle
      run: npx webpack-bundle-analyzer dist/static/js/*.js
      continue-on-error: true
      
    - name: Upload Bundle Analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bundle-analysis
        path: dist/

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [quality, accessibility, performance, security, e2e]
    if: always()
    
    steps:
    - name: Notify Results
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ci-results'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  # Performance Budget Monitoring
  performance-budget:
    name: Performance Budget
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Run Performance Budget Check
      run: |
        npx lighthouse-ci autorun \
          --collect.url=https://mawps.netlify.app \
          --assert.assertions.performance=90 \
          --assert.assertions.accessibility=95 \
          --assert.assertions.best-practices=90 \
          --assert.assertions.seo=90
      continue-on-error: true

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Dependency Audit
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Run Security Audit
      run: npm audit --audit-level moderate
      continue-on-error: true
      
    - name: Check for Outdated Dependencies
      run: npm outdated
      continue-on-error: true

  # Code Coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Run Tests with Coverage
      run: npm run test:coverage
      continue-on-error: true
      
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # Database Migration Check
  migration-check:
    name: Migration Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Check for Database Migrations
      run: |
        if [ -d "migrations" ]; then
          echo "Database migrations found"
          ls -la migrations/
        else
          echo "No database migrations found"
        fi
      continue-on-error: true

  # API Documentation Check
  api-docs-check:
    name: API Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Validate OpenAPI
      run: |
        npx swagger-cli validate docs/api/openapi.yaml
        npx redoc-cli lint docs/api/openapi.yaml
      continue-on-error: true
      
    - name: Build API Documentation
      run: |
        chmod +x docs/api/build.sh
        ./docs/api/build.sh
      continue-on-error: true

  # Environment Variables Check
  env-check:
    name: Environment Variables Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Check Environment Variables
      run: |
        echo "Checking for required environment variables..."
        if [ -f ".env.example" ]; then
          echo "Found .env.example file"
          cat .env.example
        else
          echo "No .env.example file found"
        fi
      continue-on-error: true

  # Final Status Check
  final-status:
    name: Final Status Check
    runs-on: ubuntu-latest
    needs: [quality, accessibility, performance, security, e2e, performance-budget, security-scan, dependency-audit, coverage, migration-check, api-docs-check, env-check]
    if: always()
    
    steps:
    - name: Check All Jobs Status
      run: |
        echo "Quality: ${{ needs.quality.result }}"
        echo "Accessibility: ${{ needs.accessibility.result }}"
        echo "Performance: ${{ needs.performance.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "E2E: ${{ needs.e2e.result }}"
        echo "Performance Budget: ${{ needs.performance-budget.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Dependency Audit: ${{ needs.dependency-audit.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        echo "Migration Check: ${{ needs.migration-check.result }}"
        echo "API Docs Check: ${{ needs.api-docs-check.result }}"
        echo "Env Check: ${{ needs.env-check.result }}"
        
    - name: Set Final Status
      run: |
        if [ "${{ needs.quality.result }}" = "success" ] && [ "${{ needs.accessibility.result }}" = "success" ] && [ "${{ needs.performance.result }}" = "success" ]; then
          echo "✅ All critical checks passed"
          exit 0
        else
          echo "❌ Some critical checks failed"
          exit 1
        fi
