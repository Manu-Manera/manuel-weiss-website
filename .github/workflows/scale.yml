name: Scale Pipeline

on:
  schedule:
    - cron: '*/10 * * * *' # Every 10 minutes
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to scale'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      scale_type:
        description: 'Type of scaling'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - manual
      target_cpu:
        description: 'Target CPU utilization (%)'
        required: false
        default: '70'
        type: string
      target_memory:
        description: 'Target memory utilization (%)'
        required: false
        default: '80'
        type: string
      min_instances:
        description: 'Minimum number of instances'
        required: false
        default: '1'
        type: string
      max_instances:
        description: 'Maximum number of instances'
        required: false
        default: '10'
        type: string

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-central-1'

jobs:
  # Auto scaling
  auto-scaling:
    name: Auto Scaling
    runs-on: ubuntu-latest
    if: github.event.inputs.scale_type == 'auto'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check current metrics
        run: npm run scale:check-metrics -- --environment=${{ github.event.inputs.environment }}

      - name: Calculate scaling decision
        run: npm run scale:calculate -- --environment=${{ github.event.inputs.environment }}

      - name: Apply auto scaling
        run: npm run scale:apply-auto -- --environment=${{ github.event.inputs.environment }}

  # Manual scaling
  manual-scaling:
    name: Manual Scaling
    runs-on: ubuntu-latest
    if: github.event.inputs.scale_type == 'manual'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Apply manual scaling
        run: npm run scale:apply-manual -- --environment=${{ github.event.inputs.environment }} --target-cpu=${{ github.event.inputs.target_cpu }} --target-memory=${{ github.event.inputs.target_memory }} --min-instances=${{ github.event.inputs.min_instances }} --max-instances=${{ github.event.inputs.max_instances }}

  # Scale Lambda functions
  scale-lambda:
    name: Scale Lambda Functions
    runs-on: ubuntu-latest
    needs: [auto-scaling, manual-scaling]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Scale Lambda functions
        run: npm run scale:lambda -- --environment=${{ github.event.inputs.environment }}

  # Scale ECS services
  scale-ecs:
    name: Scale ECS Services
    runs-on: ubuntu-latest
    needs: [auto-scaling, manual-scaling]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Scale ECS services
        run: npm run scale:ecs -- --environment=${{ github.event.inputs.environment }}

  # Scale RDS instances
  scale-rds:
    name: Scale RDS Instances
    runs-on: ubuntu-latest
    needs: [auto-scaling, manual-scaling]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Scale RDS instances
        run: npm run scale:rds -- --environment=${{ github.event.inputs.environment }}

  # Generate scaling report
  scaling-report:
    name: Generate Scaling Report
    runs-on: ubuntu-latest
    needs: [auto-scaling, manual-scaling, scale-lambda, scale-ecs, scale-rds]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate scaling report
        run: npm run scale:report -- --environment=${{ github.event.inputs.environment }}

      - name: Upload scaling report
        uses: actions/upload-artifact@v4
        with:
          name: scaling-report
          path: scaling-report/

      - name: Send scaling notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#scaling'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
