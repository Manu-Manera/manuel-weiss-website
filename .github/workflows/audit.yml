name: Audit Pipeline

on:
  schedule:
    - cron: '0 5 * * 0' # Weekly on Sunday at 5 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to audit'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      audit_type:
        description: 'Type of audit'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - security
          - compliance
          - performance
          - cost
          - governance

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-central-1'

jobs:
  # Security audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'all' || github.event.inputs.audit_type == 'security'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run security audit
        run: npm run audit:security -- --environment=${{ github.event.inputs.environment }}

      - name: Check IAM policies
        run: npm run audit:iam -- --environment=${{ github.event.inputs.environment }}

      - name: Check network security
        run: npm run audit:network -- --environment=${{ github.event.inputs.environment }}

      - name: Check encryption
        run: npm run audit:encryption -- --environment=${{ github.event.inputs.environment }}

  # Compliance audit
  compliance-audit:
    name: Compliance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'all' || github.event.inputs.audit_type == 'compliance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run GDPR compliance audit
        run: npm run audit:gdpr -- --environment=${{ github.event.inputs.environment }}

      - name: Run SOC 2 compliance audit
        run: npm run audit:soc2 -- --environment=${{ github.event.inputs.environment }}

      - name: Run ISO 27001 compliance audit
        run: npm run audit:iso27001 -- --environment=${{ github.event.inputs.environment }}

      - name: Run PCI DSS compliance audit
        run: npm run audit:pcidss -- --environment=${{ github.event.inputs.environment }}

  # Performance audit
  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'all' || github.event.inputs.audit_type == 'performance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run performance audit
        run: npm run audit:performance -- --environment=${{ github.event.inputs.environment }}

      - name: Check Lambda performance
        run: npm run audit:lambda-performance -- --environment=${{ github.event.inputs.environment }}

      - name: Check API performance
        run: npm run audit:api-performance -- --environment=${{ github.event.inputs.environment }}

      - name: Check database performance
        run: npm run audit:database-performance -- --environment=${{ github.event.inputs.environment }}

  # Cost audit
  cost-audit:
    name: Cost Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'all' || github.event.inputs.audit_type == 'cost'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run cost audit
        run: npm run audit:cost -- --environment=${{ github.event.inputs.environment }}

      - name: Check Lambda costs
        run: npm run audit:lambda-cost -- --environment=${{ github.event.inputs.environment }}

      - name: Check storage costs
        run: npm run audit:storage-cost -- --environment=${{ github.event.inputs.environment }}

      - name: Check compute costs
        run: npm run audit:compute-cost -- --environment=${{ github.event.inputs.environment }}

  # Governance audit
  governance-audit:
    name: Governance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'all' || github.event.inputs.audit_type == 'governance'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run governance audit
        run: npm run audit:governance -- --environment=${{ github.event.inputs.environment }}

      - name: Check resource tagging
        run: npm run audit:tagging -- --environment=${{ github.event.inputs.environment }}

      - name: Check access controls
        run: npm run audit:access-controls -- --environment=${{ github.event.inputs.environment }}

      - name: Check change management
        run: npm run audit:change-management -- --environment=${{ github.event.inputs.environment }}

  # Generate audit report
  audit-report:
    name: Generate Audit Report
    runs-on: ubuntu-latest
    needs: [security-audit, compliance-audit, performance-audit, cost-audit, governance-audit]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate audit report
        run: npm run audit:report -- --environment=${{ github.event.inputs.environment }}

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: audit-report
          path: audit-report/

      - name: Send audit notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#audit'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
