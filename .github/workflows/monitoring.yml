name: Monitoring Pipeline

on:
  schedule:
    - cron: '*/5 * * * *' # Every 5 minutes - RE-ENABLED
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to monitor'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      monitoring_type:
        description: 'Type of monitoring'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - health
          - performance
          - security
          - cost

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-central-1'

jobs:
  # Health monitoring
  health-monitoring:
    name: Health Monitoring
    runs-on: ubuntu-latest
    if: (github.event.inputs.monitoring_type == 'all' || github.event.inputs.monitoring_type == 'health') && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check application health
        run: npm run monitoring:health -- --environment=${{ github.event.inputs.environment }}

      - name: Check Lambda health
        run: npm run monitoring:lambda-health -- --environment=${{ github.event.inputs.environment }}

      - name: Check database health
        run: npm run monitoring:database-health -- --environment=${{ github.event.inputs.environment }}

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: (github.event.inputs.monitoring_type == 'all' || github.event.inputs.monitoring_type == 'performance') && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check API performance
        run: npm run monitoring:api-performance -- --environment=${{ github.event.inputs.environment }}

      - name: Check Lambda performance
        run: npm run monitoring:lambda-performance -- --environment=${{ github.event.inputs.environment }}

      - name: Check database performance
        run: npm run monitoring:database-performance -- --environment=${{ github.event.inputs.environment }}

  # Security monitoring
  security-monitoring:
    name: Security Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.monitoring_type == 'all' || github.event.inputs.monitoring_type == 'security'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check security events
        run: npm run monitoring:security-events -- --environment=${{ github.event.inputs.environment }}

      - name: Check access patterns
        run: npm run monitoring:access-patterns -- --environment=${{ github.event.inputs.environment }}

      - name: Check compliance status
        run: npm run monitoring:compliance -- --environment=${{ github.event.inputs.environment }}

  # Cost monitoring
  cost-monitoring:
    name: Cost Monitoring
    runs-on: ubuntu-latest
    if: github.event.inputs.monitoring_type == 'all' || github.event.inputs.monitoring_type == 'cost'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check cost trends
        run: npm run monitoring:cost-trends -- --environment=${{ github.event.inputs.environment }}

      - name: Check budget alerts
        run: npm run monitoring:budget-alerts -- --environment=${{ github.event.inputs.environment }}

      - name: Check resource utilization
        run: npm run monitoring:resource-utilization -- --environment=${{ github.event.inputs.environment }}

  # Generate monitoring report
  monitoring-report:
    name: Generate Monitoring Report
    runs-on: ubuntu-latest
    needs: [health-monitoring, performance-monitoring, security-monitoring, cost-monitoring]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate monitoring report
        run: npm run monitoring:report -- --environment=${{ github.event.inputs.environment }}

      - name: Upload monitoring report
        uses: actions/upload-artifact@v4
        with:
          name: monitoring-report
          path: monitoring-report/

      - name: Send monitoring notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#monitoring'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
