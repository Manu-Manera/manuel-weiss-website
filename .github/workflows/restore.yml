name: Restore Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to restore to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      backup_date:
        description: 'Backup date to restore from (YYYY-MM-DD)'
        required: true
        default: ''
        type: string
      restore_type:
        description: 'Type of restore'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - database
          - files
          - configuration
      confirm_restore:
        description: 'Confirm restore (this will overwrite current data)'
        required: true
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-central-1'

jobs:
  # Validate restore
  validate-restore:
    name: Validate Restore
    runs-on: ubuntu-latest
    outputs:
      can_restore: ${{ steps.validate.outputs.can_restore }}
      backup_exists: ${{ steps.validate.outputs.backup_exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate restore
        id: validate
        run: |
          if [[ "${{ github.event.inputs.confirm_restore }}" != "true" ]]; then
            echo "can_restore=false" >> $GITHUB_OUTPUT
            echo "backup_exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if npm run restore:validate -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}; then
            echo "can_restore=true" >> $GITHUB_OUTPUT
            echo "backup_exists=true" >> $GITHUB_OUTPUT
          else
            echo "can_restore=false" >> $GITHUB_OUTPUT
            echo "backup_exists=false" >> $GITHUB_OUTPUT
          fi

  # Restore database
  restore-database:
    name: Restore Database
    runs-on: ubuntu-latest
    needs: validate-restore
    if: needs.validate-restore.outputs.can_restore == 'true' && (github.event.inputs.restore_type == 'all' || github.event.inputs.restore_type == 'database')
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Restore DynamoDB tables
        run: npm run restore:dynamodb -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}

      - name: Restore RDS instances
        run: npm run restore:rds -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}

      - name: Restore Timestream tables
        run: npm run restore:timestream -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}

  # Restore files
  restore-files:
    name: Restore Files
    runs-on: ubuntu-latest
    needs: validate-restore
    if: needs.validate-restore.outputs.can_restore == 'true' && (github.event.inputs.restore_type == 'all' || github.event.inputs.restore_type == 'files')
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Restore S3 buckets
        run: npm run restore:s3 -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}

      - name: Restore EFS volumes
        run: npm run restore:efs -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}

  # Restore configuration
  restore-configuration:
    name: Restore Configuration
    runs-on: ubuntu-latest
    needs: validate-restore
    if: needs.validate-restore.outputs.can_restore == 'true' && (github.event.inputs.restore_type == 'all' || github.event.inputs.restore_type == 'configuration')
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Restore Lambda configurations
        run: npm run restore:lambda-config -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}

      - name: Restore API Gateway configurations
        run: npm run restore:api-gateway-config -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}

      - name: Restore CloudFormation stacks
        run: npm run restore:cloudformation -- --environment=${{ github.event.inputs.environment }} --backup-date=${{ github.event.inputs.backup_date }}

  # Post-restore
  post-restore:
    name: Post-restore
    runs-on: ubuntu-latest
    needs: [validate-restore, restore-database, restore-files, restore-configuration]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run post-restore tests
        run: npm run test:post-restore -- --environment=${{ github.event.inputs.environment }}

      - name: Send restore notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#restore'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

      - name: Create restore issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Restore from ${{ github.event.inputs.backup_date }}',
              body: 'Restore performed from backup date: ${{ github.event.inputs.backup_date }}',
              labels: ['restore', 'urgent']
            })
