name: Backup Pipeline

on:
  schedule:
    - cron: '0 1 * * *' # Daily at 1 AM
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to backup'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      backup_type:
        description: 'Type of backup'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - database
          - files
          - configuration
      retention_days:
        description: 'Retention days for backup'
        required: false
        default: '30'
        type: string

env:
  NODE_VERSION: '18'
  AWS_REGION: 'eu-central-1'

jobs:
  # Database backup
  database-backup:
    name: Database Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.backup_type == 'all' || github.event.inputs.backup_type == 'database'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Backup DynamoDB tables
        run: npm run backup:dynamodb -- --environment=${{ github.event.inputs.environment }} --retention-days=${{ github.event.inputs.retention_days }}

      - name: Backup RDS instances
        run: npm run backup:rds -- --environment=${{ github.event.inputs.environment }} --retention-days=${{ github.event.inputs.retention_days }}

      - name: Backup Timestream tables
        run: npm run backup:timestream -- --environment=${{ github.event.inputs.environment }} --retention-days=${{ github.event.inputs.retention_days }}

  # Files backup
  files-backup:
    name: Files Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.backup_type == 'all' || github.event.inputs.backup_type == 'files'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Backup S3 buckets
        run: npm run backup:s3 -- --environment=${{ github.event.inputs.environment }} --retention-days=${{ github.event.inputs.retention_days }}

      - name: Backup EFS volumes
        run: npm run backup:efs -- --environment=${{ github.event.inputs.environment }} --retention-days=${{ github.event.inputs.retention_days }}

  # Configuration backup
  configuration-backup:
    name: Configuration Backup
    runs-on: ubuntu-latest
    if: github.event.inputs.backup_type == 'all' || github.event.inputs.backup_type == 'configuration'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Backup Lambda configurations
        run: npm run backup:lambda-config -- --environment=${{ github.event.inputs.environment }} --retention-days=${{ github.event.inputs.retention_days }}

      - name: Backup API Gateway configurations
        run: npm run backup:api-gateway-config -- --environment=${{ github.event.inputs.environment }} --retention-days=${{ github.event.inputs.retention_days }}

      - name: Backup CloudFormation stacks
        run: npm run backup:cloudformation -- --environment=${{ github.event.inputs.environment }} --retention-days=${{ github.event.inputs.retention_days }}

  # Generate backup report
  backup-report:
    name: Generate Backup Report
    runs-on: ubuntu-latest
    needs: [database-backup, files-backup, configuration-backup]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate backup report
        run: npm run backup:report -- --environment=${{ github.event.inputs.environment }}

      - name: Upload backup report
        uses: actions/upload-artifact@v4
        with:
          name: backup-report
          path: backup-report/

      - name: Send backup notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#backup'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
