name: Cursor Feedback System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Läuft alle 6 Stunden für kontinuierliches Feedback
    - cron: '0 */6 * * *'

jobs:
  cursor-feedback:
    name: Cursor AI Feedback
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      run: |
        npm ci
        echo "Dependencies installed successfully"
      
    - name: Run Cursor Feedback System
      run: |
        chmod +x tests/cursor-feedback.js
        node tests/cursor-feedback.js
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cursor-feedback-results
        path: |
          cursor-feedback.json
          test-results/
          
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let feedback = {};
          
          try {
            const feedbackData = fs.readFileSync('cursor-feedback.json', 'utf8');
            feedback = JSON.parse(feedbackData);
          } catch (error) {
            console.log('Could not read feedback file');
          }
          
          const totalTests = feedback.tests ? feedback.tests.length : 0;
          const passedTests = feedback.tests ? feedback.tests.filter(t => t.status === 'PASS').length : 0;
          const criticalErrors = feedback.errors ? feedback.errors.filter(e => e.type.includes('CRITICAL')).length : 0;
          
          const comment = `## 🤖 Cursor AI Feedback
          
          ### 📊 Test Results
          - **Total Tests:** ${totalTests}
          - **Passed:** ${passedTests}
          - **Critical Errors:** ${criticalErrors}
          
          ### 🚨 Critical Issues
          ${criticalErrors > 0 ? feedback.errors.filter(e => e.type.includes('CRITICAL')).map(e => `- ❌ ${e.message}`).join('\n') : '✅ No critical issues found'}
          
          ### 💡 Recommendations
          ${criticalErrors > 0 ? '🔧 Immediate action required to fix critical issues' : '✅ All systems functioning properly'}
          
          ---
          *This feedback is automatically generated by the Cursor Feedback System*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
