# CloudFront Distribution mit OAC (Origin Access Control)
# Für sichere, schnelle Media-Delivery

AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFront Distribution für Manuel Weiss Media Delivery'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [production, staging, development]
    Description: Deployment environment

  S3BucketName:
    Type: String
    Description: S3 Bucket für Media Storage
    Default: mw-media-bucket

Resources:
  # CloudFront Origin Access Control
  MediaOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${Environment}-media-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  MediaDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'Manuel Weiss Media Distribution - ${Environment}'
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        
        # Origins
        Origins:
          - Id: MediaS3Origin
            DomainName: !GetAtt MediaBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref MediaOriginAccessControl
            
        # Default Cache Behavior
        DefaultCacheBehavior:
          TargetOriginId: MediaS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          
          # Cache Policy
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingOptimized
          
          # Origin Request Policy
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # Managed-CORS-S3Origin
          
          # Response Headers Policy
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # Managed-SecurityHeadersPolicy
          
          # Function Associations
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt MediaOptimizationFunction.FunctionMetadata.FunctionARN

        # Cache Behaviors für verschiedene Content-Typen
        CacheBehaviors:
          # Bilder - Aggressive Caching
          - PathPattern: 'images/*'
            TargetOriginId: MediaS3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
            TTL:
              DefaultTTL: 31536000 # 1 Jahr
              MaxTTL: 31536000
              MinTTL: 86400 # 1 Tag
            
          # Videos - Moderate Caching
          - PathPattern: 'videos/*'
            TargetOriginId: MediaS3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
            TTL:
              DefaultTTL: 86400 # 1 Tag
              MaxTTL: 604800 # 1 Woche
              MinTTL: 3600 # 1 Stunde
            
          # Dokumente - Conservative Caching
          - PathPattern: 'documents/*'
            TargetOriginId: MediaS3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            Compress: true
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
            ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03
            TTL:
              DefaultTTL: 3600 # 1 Stunde
              MaxTTL: 86400 # 1 Tag
              MinTTL: 0

        # Custom Error Pages
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300

        # Logging
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          Prefix: !Sub 'cloudfront-logs/${Environment}/'
          IncludeCookies: false

        # Aliases
        Aliases:
          - !If [IsProduction, 'media.manuel-weiss.com', !Sub 'media-${Environment}.manuel-weiss.com']

        # SSL Certificate
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  # S3 Bucket für Media Storage
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${S3BucketName}-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      
      # Bucket Policy für CloudFront OAC
      Policy:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${MediaBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${MediaDistribution}'
      
      # Lifecycle Rules
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
          
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
          
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionTransitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
              - StorageClass: GLACIER
                TransitionInDays: 60
            NoncurrentVersionExpiration:
              NoncurrentDays: 90

      # Versioning
      VersioningConfiguration:
        Status: Enabled

      # Encryption
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

      # Notification Configuration
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: s3:ObjectCreated:*
            CloudWatchConfiguration:
              LogGroupName: !Ref MediaUploadLogGroup

  # CloudWatch Log Group für Media Uploads
  MediaUploadLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/media-uploads-${Environment}'
      RetentionInDays: 14

  # CloudFront Function für Media Optimization
  MediaOptimizationFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub 'media-optimization-${Environment}'
      FunctionConfig:
        Comment: 'Media optimization and format detection'
        Runtime: cloudfront-js-1.0
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var headers = request.headers;
          
          // Accept-Header optimieren
          if (headers['accept']) {
            var accept = headers['accept'][0].value;
            
            // WebP Support prüfen
            if (accept.includes('image/webp')) {
              // WebP Version anfordern falls verfügbar
              request.uri = request.uri.replace(/\.(jpg|jpeg|png)$/i, '.webp');
            }
            
            // AVIF Support prüfen
            if (accept.includes('image/avif')) {
              request.uri = request.uri.replace(/\.(jpg|jpeg|png|webp)$/i, '.avif');
            }
          }
          
          return request;
        }

  # S3 Bucket für Logging
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'cloudfront-logs-${Environment}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']

Outputs:
  DistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref MediaDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  DistributionDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt MediaDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DistributionDomainName'

  MediaBucketName:
    Description: S3 Media Bucket Name
    Value: !Ref MediaBucket
    Export:
      Name: !Sub '${AWS::StackName}-MediaBucketName'

  MediaBucketArn:
    Description: S3 Media Bucket ARN
    Value: !GetAtt MediaBucket.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MediaBucketArn'
